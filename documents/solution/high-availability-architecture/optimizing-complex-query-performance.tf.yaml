ROSTemplateFormatVersion: '2015-09-01'
Transform: Aliyun::Terraform-v1.5
Description:
  zh-cn: 电商业务复杂查询性能优化。
  en: Optimizing Complex Query Performance in E-commerce.
Parameters:
  zone_id:
    Type: String
    AssociationProperty: ALIYUN::ECS::Instance::ZoneId
    Label:
      en: VSwitch Availability Zone
      zh-cn: 交换机可用区
  ecs_instance_type:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例规格
    Description:
      en: <font color='blue'><b>Before selecting a model, please confirm whether
        the model is in stock in the current availability zone. To save testing 
        costs, it is recommended to use a model with 2 cores and 4G memory, for 
        example:ecs.c7.large</b></font>.
      zh-cn: <font 
        color='blue'><b>选择机型前请先确认当前可用区下该机型是否有库存，为节省测试成本，推荐使用2核4G内存的规格，例如：ecs.c7.large</b></font>。
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: zone_id
  ecs_instance_password:
    Type: String
    Label:
      en: root account password
      zh-cn: root 账号密码
    Description:
      en: Server root account login password, Length 8-30, must contain 
        three(Capital letters, lowercase letters, numbers, 
        ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol in).
      zh-cn: 服务器root账号登录密码,长度8-30，必须包含三项（大写字母、小写字母、数字、 
        ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    ConstraintDescription:
      en: Length 8-30, must contain three(Capital letters, lowercase letters, 
        numbers, ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol in).
      zh-cn: 长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    AssociationProperty: ALIYUN::ECS::Instance::Password
  polar_db_node_class:
    Type: String
    Label:
      en: PolarDB Node Class
      zh-cn: PolarDB Mysql资源规格
    Description:
      en: <font color='blue'><b>Before selecting a model, please confirm whether
        the model is in stock in the current availability zone. To save testing 
        costs, it is recommended to use a model with 2 cores and 4G memory, for 
        example:polar.mysql.g2.medium</b></font>, see detail:<a 
        href='https://help.aliyun.com/zh/polardb/polardb-for-mysql/how-to-select-generic-and-exclusive-specifications'
        target='_blank'><b><font color='red'>Specification 
        inquiry</font></b></a>.
      zh-cn: <font 
        color='blue'><b>选择机型前请先确认当前可用区下该机型是否有库存，为节省测试成本，推荐使用2核4G内存的规格，例如：polar.mysql.g2.medium</b></font>，<a
        href='https://help.aliyun.com/zh/polardb/polardb-for-mysql/how-to-select-generic-and-exclusive-specifications'
        target='_blank'><b><font color='red'>规格查询</font></b></a>。
    AssociationProperty: ALIYUN::POLARDB::DBCluster::DBNodeClass
    AssociationPropertyMetadata:
      ZoneId: zone_id
      PayType: Postpaid
      DBType: MySQL
      DBVersion: '8.0'
      CommodityCode: polardb_payg
    Default: polar.mysql.g2.large
  polar_account_name:
    Type: String
    Label:
      en: Database Account
      zh-cn: 数据库账号
    Description:
      en: Maximum 16 characters,Consists of a lowercase letter, a number, an 
        underscore, a letter beginning, a letter or a number ending.<br><b>note：
        <font color='blue'>Keywords cannot be used, e.g.:admin/root</font></b>
      zh-cn: 最长16个字符, 由小写字母，数字、下划线组成、字母开头，字母或数字结尾。<br><b>注： <font 
        color='blue'>关键字不能用，如：admin/root</font></b>
    Default: polardb_admin
  polar_db_name:
    Type: String
    Label:
      en: Database Name
      zh-cn: 数据库名
    Description:
      en: The value can contain up to 64 lowercase letters, digits, hyphens (-),
        and underscores (_). It must start with a letter or digit and end with a
        letter or digit.
      zh-cn: 由小写字母、数字、中划线（-）、下划线（_）组成，字母或数字开头，字母或数字结尾，最长64个字符。
    Default: polardb_db
  db_password:
    Type: String
    Label:
      en: DB password
      zh-cn: 数据库密码
    Description:
      en: Length 8-32 characters, can contain size letters, Numbers and special 
        symbols (including:!@#$%^&*-+=_).
      zh-cn: '大小写字母、数字、特殊字符占三种，长度为8～32个字符；特殊字符为 ! @ # $ % ^ & * ( ) _ + - =。'
    ConstraintDescription:
      en: Length 8-32, can contain size letters, Numbers and special symbols 
        (including:!@#$%^&*-+=_).
      zh-cn: 长度8-32,可包含大小字母、数字及特殊符号（包含：!@#$%^&*-+=_）。
    MinLength: '8'
    MaxLength: '32'
    NoEcho: true
Metadata:
  ALIYUN::ROS::Interface:
    ParameterGroups:
    - Parameters:
      - zone_id
      - ecs_instance_type
      - ecs_instance_password
      Label:
        default:
          zh-cn: ECS 配置
          en: ECS Configuration
    - Parameters:
      - polar_db_node_class
      - polar_db_name
      - polar_account_name
      - db_password
      Label:
        default:
          zh-cn: PolarDB 配置
          en: PolarDB Configuration
    TemplateTags:
    - acs:technical-solution:high-availability-architecture:电商业务复杂查询性能优化-tech_solu_190
    Hidden:
    - vpc_cidr_block
    - vswitch_cidr_block
Workspace:
  variable.tf: |-
    # Parameters
    variable "zone_id" {
      type        = string
      description = "请输入可用区ID（例如：cn-hangzhou-j）。请确保该可用区支持您要创建的ECS和PolarDB资源规格。"
      default     = "cn-hangzhou-j"
    }

    variable "vpc_cidr_block" {
      description = "请输入VPC的CIDR块（支持的值包括：192.168.0.0/16、172.16.0.0/12、10.0.0.0/8）。这是您的虚拟私有云的地址范围。"
      default     = "192.168.0.0/16"
      validation {
        condition     = contains(["192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8"], var.vpc_cidr_block)
        error_message = "无效的VPC CIDR块，请检查并重新输入。"
      }
    }

    variable "vswitch_cidr_block" {
      description = "请输入交换机的CIDR块（例如：192.168.0.0/24）。这是您虚拟交换机的地址范围。"
      default     = "192.168.0.0/24"
    }

    variable "ecs_instance_type" {
      type        = string
      description = "请输入ECS实例类型。选择机型前请先确认当前可用区下该机型是否有库存，为节省测试成本，推荐使用2核4G内存的规格，例如：ecs.c7.large。"
      default     = "ecs.c7.large"
    }

    variable "ecs_instance_password" {
      type        = string
      description = "请输入服务器root账号登录密码。密码长度为8-30位，必须包含大写字母、小写字母、数字和特殊字符（如：!@#$%^&*_-+=|{}[]:;'<>,.?/）。"
      sensitive   = true
      validation {
        condition     = length(var.ecs_instance_password) >= 8 && length(var.ecs_instance_password) <= 30
        error_message = "密码长度必须在8-30位之间。"
      }
    }

    variable "polar_db_node_class" {
      type        = string
      description = "请输入PolarDB MySQL资源规格。选择机型前请先确认当前可用区下该机型是否有库存，为节省测试成本，推荐使用2核4G内存的规格，例如：polar.mysql.g2.medium。"
      default     = "polar.mysql.g2.large"
    }

    variable "polar_account_name" {
      type        = string
      description = "请输入数据库账号名称。最长16个字符，由小写字母、数字、下划线组成，字母开头，字母或数字结尾。注意：关键字不能用，如：admin/root。"
      default     = "polardb_admin"
      validation {
        condition     = can(regex("^[a-z][a-z0-9_]{0,14}[a-z0-9]$", var.polar_account_name)) && !contains(["admin", "root"], var.polar_account_name)
        error_message = "数据库账号名称格式不正确或使用了保留关键字。"
      }
    }

    variable "polar_db_name" {
      type        = string
      description = "请输入数据库名称。由小写字母、数字、中划线（-）、下划线（_）组成，字母或数字开头，字母或数字结尾，最长64个字符。"
      default     = "polardb_db"
      validation {
        condition     = can(regex("^[a-z0-9][a-z0-9_-]{0,62}[a-z0-9]$", var.polar_db_name))
        error_message = "数据库名称格式不正确。名称应由小写字母、数字、中划线（-）、下划线（_）组成，字母或数字开头，字母或数字结尾，最长64个字符。"
      }
    }

    variable "db_password" {
      type        = string
      description = "请输入数据库密码。大小写字母、数字、特殊字符占三种，长度为8～32个字符；特殊字符为 ! @ # $ % ^ & * ( ) _ + - =。"
      sensitive   = true
      validation {
        condition     = length(var.db_password) >= 8 && length(var.db_password) <= 32
        error_message = "数据库密码长度必须在8-32位之间。"
      }
    }
  main.tf: |-
    provider "alicloud" {
    }

    resource "random_id" "suffix" {
      byte_length = 8
    }
    data "alicloud_images" "default" {
      name_regex  = "^aliyun_3_x64_20G_alibase_.*"
      most_recent = true
      owners      = "system"
    }
    locals {
      common_name    = random_id.suffix.id
      install_script = <<SCRIPT
    #!/bin/bash
    cat << EOF >> ~/.bash_profile
    export DB_HOST="${alicloud_polardb_cluster.polardb_cluster.connection_string}"
    export DB_USER="${var.polar_account_name}"
    export DB_PASSWORD="${var.db_password}"
    export DB_NAME="${var.polar_db_name}"
    export ROS_DEPLOY=true
    EOF

    source ~/.bash_profile

    curl -fsSL https://help-static-aliyun-doc.aliyuncs.com/install-script/complex-query/data-init.sh | bash

    cat << EOF >> ./create_columnar_index.py
    import os
    import pymysql
    from dbutils.pooled_db import PooledDB

    db_config = {
        'host': os.getenv('DB_HOST', ''),
        'user': os.getenv('DB_USER', ''),
        'password': os.getenv('DB_PASSWORD', ''),
        'database': os.getenv('DB_NAME', ''),
        'charset': 'utf8mb4',
        'cursorclass': pymysql.cursors.DictCursor
    }

    connection_pool = PooledDB(
        creator=pymysql,
        maxconnections=100,
        mincached=1,
        maxcached=10,
        maxshared=0,
        blocking=True,
        **db_config
    )

    def create_columnar_index(database_name):
        try:
            connection = connection_pool.connection()
            with connection.cursor() as cursor:
                # 执行创建列式索引的命令
                create_index_query = f"CREATE COLUMNAR INDEX FOR TABLES IN {database_name};"
                cursor.execute(create_index_query)
                print("Columnar index created successfully.")

        except Exception as e:
            print(f"Error: {e}")
        finally:
            if connection:
                connection.close()

    if __name__ == "__main__":
        database_name = os.getenv('DB_NAME', '')
        if not database_name:
            print("Database name is not set. Please set the DB_NAME environment variable.")
        else:
            create_columnar_index(database_name)
    EOF
    sudo -E python3 create_columnar_index.py

    curl -fsSL https://help-static-aliyun-doc.aliyuncs.com/install-script/complex-query/install.sh | bash
    SCRIPT
    }

    # VPC Resources
    resource "alicloud_vpc" "vpc" {
      vpc_name   = "VPC-${local.common_name}"
      cidr_block = var.vpc_cidr_block
    }

    # VSwitch Resources
    resource "alicloud_vswitch" "vswitch" {
      vpc_id       = alicloud_vpc.vpc.id
      cidr_block   = var.vswitch_cidr_block
      zone_id      = var.zone_id
      vswitch_name = "vsw_001-${local.common_name}"
    }

    # Security Group
    resource "alicloud_security_group" "security_group" {
      vpc_id              = alicloud_vpc.vpc.id
      security_group_name = "SecurityGroup-${local.common_name}"
      security_group_type = "normal"
    }

    resource "alicloud_security_group_rule" "allow_http" {
      type              = "ingress"
      ip_protocol       = "tcp"
      port_range        = "80/80"
      cidr_ip           = "0.0.0.0/0"
      security_group_id = alicloud_security_group.security_group.id
    }

    # ECS Instance
    resource "alicloud_instance" "ecs_instance" {
      instance_name              = "ecs-${local.common_name}"
      system_disk_category       = "cloud_essd"
      system_disk_size           = 40
      image_id                   = data.alicloud_images.default.images.0.id
      vswitch_id                 = alicloud_vswitch.vswitch.id
      password                   = var.ecs_instance_password
      instance_type              = var.ecs_instance_type
      internet_max_bandwidth_out = 50
      security_groups            = [alicloud_security_group.security_group.id]
      availability_zone          = var.zone_id
    }

    # PolarDB Cluster
    resource "alicloud_polardb_cluster" "polardb_cluster" {
      zone_id             = var.zone_id
      vpc_id              = alicloud_vpc.vpc.id
      vswitch_id          = alicloud_vswitch.vswitch.id
      db_type             = "MySQL"
      db_version          = "8.0"
      db_node_class       = var.polar_db_node_class
      pay_type            = "PostPaid"
      security_group_ids  = [alicloud_security_group.security_group.id]
      security_ips        = [var.vpc_cidr_block]
      db_node_count       = 3
      proxy_type          = "GENERAL"
      creation_category   = "Normal"
      hot_standby_cluster = "OFF"
      imci_switch         = "ON"
    }

    # PolarDB Database
    resource "alicloud_polardb_database" "polardb_database" {
      db_cluster_id      = alicloud_polardb_cluster.polardb_cluster.id
      db_name            = var.polar_db_name
      character_set_name = "utf8"

      depends_on = [alicloud_polardb_cluster.polardb_cluster]
    }

    # PolarDB Account
    resource "alicloud_polardb_account" "polardb_account" {
      db_cluster_id    = alicloud_polardb_cluster.polardb_cluster.id
      account_name     = var.polar_account_name
      account_password = var.db_password
      account_type     = "Normal"

      depends_on = [alicloud_polardb_database.polardb_database]
    }

    # PolarDB Account Privilege
    resource "alicloud_polardb_account_privilege" "account_privilege" {
      db_cluster_id     = alicloud_polardb_cluster.polardb_cluster.id
      account_name      = alicloud_polardb_account.polardb_account.account_name
      account_privilege = "ReadWrite"
      db_names          = [alicloud_polardb_database.polardb_database.db_name]

      depends_on = [
        alicloud_polardb_database.polardb_database,
        alicloud_polardb_account.polardb_account
      ]
    }

    # Wait for resources to be ready
    resource "time_sleep" "wait_60_seconds" {
      depends_on = [
        alicloud_polardb_database.polardb_database,
        alicloud_polardb_account.polardb_account,
        alicloud_polardb_account_privilege.account_privilege,
        alicloud_polardb_cluster.polardb_cluster
      ]

      create_duration = "60s"
    }

    # Additional PolarDB Node with IMCI
    resource "alicloud_polardb_cluster_endpoint" "cluster_endpoint" {
      db_cluster_id = alicloud_polardb_cluster.polardb_cluster.id

      depends_on = [time_sleep.wait_60_seconds]
    }

    # ECS Command
    resource "alicloud_ecs_command" "install_script" {
      name            = "install-${local.common_name}"
      command_content = base64encode(local.install_script)
      description     = "Install complex query optimization application"
      type            = "RunShellScript"
      working_dir     = "/root"
      timeout         = 1200
    }

    resource "alicloud_ecs_invocation" "run_install" {
      command_id  = alicloud_ecs_command.install_script.id
      instance_id = [alicloud_instance.ecs_instance.id]

      depends_on = [
        alicloud_polardb_cluster.polardb_cluster,
        alicloud_polardb_account_privilege.account_privilege,
        alicloud_polardb_cluster_endpoint.cluster_endpoint
      ]

      timeouts {
        create = "20m"
      }
    }
  output.tf: |-
    output "address" {
      description = "Web服务地址"
      value       = "http://${alicloud_instance.ecs_instance.public_ip}"
    }